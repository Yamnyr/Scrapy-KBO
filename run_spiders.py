#!/usr/bin/env python3
"""
Script pour ex√©cuter les spiders en leur fournissant les num√©ros d'entreprise depuis MongoDB
Usage:
  python run_spiders.py --spider kbo_spider --limit 10
  python run_spiders.py --spider ejustice_spider --limit 5
  python run_spiders.py --spider consult_spider --limit 20
  python run_spiders.py --spider all --limit 10
  python run_spiders.py --spider kbo_spider --diagnose
"""
import argparse
import pymongo
import subprocess
import sys
import os
import time
from typing import List, Optional


class SpiderRunner:
    def __init__(self, mongo_uri: str = "mongodb://localhost:27017", mongo_db: str = "kbo_db"):
        self.mongo_uri = mongo_uri
        self.mongo_db = mongo_db

    def test_mongodb_connection(self) -> bool:
        """Test la connexion √† MongoDB"""
        try:
            client = pymongo.MongoClient(self.mongo_uri, serverSelectionTimeoutMS=5000)
            client.server_info()  # Force une connexion
            client.close()
            print("‚úÖ Connexion MongoDB r√©ussie")
            return True
        except Exception as e:
            print(f"‚ùå Impossible de se connecter √† MongoDB: {e}")
            print(f"üîç V√©rifiez que MongoDB est d√©marr√© et accessible sur {self.mongo_uri}")
            return False

    def diagnose_database(self) -> None:
        """Diagnostic de la base de donn√©es"""
        try:
            client = pymongo.MongoClient(self.mongo_uri)
            db = client[self.mongo_db]

            print(f"\nüîç Diagnostic de la base '{self.mongo_db}':")
            print("-" * 40)

            # Lister les collections
            collections = db.list_collection_names()
            print(f"Collections trouv√©es: {collections}")

            if "entreprises" in collections:
                count = db.entreprises.count_documents({})
                print(f"üìä Nombre d'entreprises: {count}")

                if count > 0:
                    # √âchantillon de donn√©es
                    sample = db.entreprises.find_one()
                    if sample:
                        print(f"üîç Champs disponibles: {list(sample.keys())}")
                        if "enterprise_number" in sample:
                            print(f"üìù Exemple de num√©ro: {sample['enterprise_number']}")
                else:
                    print("‚ö†Ô∏è  Collection vide")
            else:
                print("‚ùå Collection 'entreprises' non trouv√©e")

            client.close()
            print("-" * 40)

        except Exception as e:
            print(f"‚ùå Erreur lors du diagnostic: {e}")

    def get_enterprise_numbers(self, limit: Optional[int] = None) -> List[str]:
        """R√©cup√®re les num√©ros d'entreprise depuis MongoDB"""
        try:
            client = pymongo.MongoClient(self.mongo_uri)
            db = client[self.mongo_db]

            # V√©rifier d'abord si la collection existe et contient des donn√©es
            if "entreprises" not in db.list_collection_names():
                print("‚ùå Collection 'entreprises' n'existe pas dans MongoDB")
                client.close()
                return []

            # Compter le nombre total de documents
            total_count = db.entreprises.count_documents({})
            print(f"üìä {total_count} entreprises trouv√©es dans la base")

            if total_count == 0:
                print("‚ùå Aucune entreprise trouv√©e dans la collection")
                client.close()
                return []

            # R√©cup√©rer les num√©ros d'entreprise
            query = {"enterprise_number": {"$exists": True, "$ne": None}}
            projection = {"enterprise_number": 1}

            if limit:
                cursor = db.entreprises.find(query, projection).limit(limit)
                print(f"üîç R√©cup√©ration de {limit} num√©ros d'entreprise maximum...")
            else:
                cursor = db.entreprises.find(query, projection)
                print(f"üîç R√©cup√©ration de tous les num√©ros d'entreprise...")

            enterprise_numbers = []
            for doc in cursor:
                if "enterprise_number" in doc and doc["enterprise_number"]:
                    enterprise_numbers.append(doc["enterprise_number"])

            client.close()

            print(f"‚úÖ {len(enterprise_numbers)} num√©ros d'entreprise valides r√©cup√©r√©s depuis MongoDB")

            if len(enterprise_numbers) == 0:
                print("‚ö†Ô∏è  Aucun num√©ro d'entreprise valide trouv√©")
                print("üí° V√©rifiez que le champ 'enterprise_number' existe et n'est pas vide")

            return enterprise_numbers

        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des donn√©es MongoDB: {e}")
            print(f"üîç D√©tails: {str(e)}")
            return []

    def run_spider(self, spider_name: str, enterprise_numbers: List[str]) -> bool:
        """Ex√©cute un spider avec les num√©ros d'entreprise fournis"""
        if not enterprise_numbers:
            print(f"‚ö†Ô∏è  Aucun num√©ro d'entreprise √† traiter pour {spider_name}")
            return False

        # Joindre les num√©ros avec des virgules
        numbers_str = ",".join(enterprise_numbers)

        # Commande Scrapy
        cmd = [
            "scrapy", "crawl", spider_name,
            "-a", f"enterprise_numbers={numbers_str}"
        ]

        print(f"üöÄ Lancement de {spider_name} avec {len(enterprise_numbers)} num√©ros...")
        print(f"Commande: {' '.join(cmd)}")

        try:
            # Ex√©cuter le spider
            result = subprocess.run(cmd, capture_output=True, text=True, cwd=os.getcwd())

            if result.returncode == 0:
                print(f"‚úÖ {spider_name} termin√© avec succ√®s")
                return True
            else:
                print(f"‚ùå {spider_name} a √©chou√©:")
                print(f"STDOUT: {result.stdout}")
                print(f"STDERR: {result.stderr}")
                return False

        except Exception as e:
            print(f"‚ùå Erreur lors de l'ex√©cution de {spider_name}: {e}")
            return False

    def run_kbo_spider_with_csv(self, limit: Optional[int] = None) -> bool:
        """Ex√©cute le spider KBO (qui utilise d√©j√† un CSV)"""
        cmd = ["scrapy", "crawl", "kbo_spider"]
        if limit:
            print(f"‚ö†Ô∏è  Note: kbo_spider utilise son propre fichier CSV, le param√®tre limit est ignor√©")

        print(f"üöÄ Lancement de kbo_spider...")

        try:
            result = subprocess.run(cmd, capture_output=True, text=True, cwd=os.getcwd())

            if result.returncode == 0:
                print(f"‚úÖ kbo_spider termin√© avec succ√®s")
                return True
            else:
                print(f"‚ùå kbo_spider a √©chou√©:")
                print(f"STDOUT: {result.stdout}")
                print(f"STDERR: {result.stderr}")
                return False

        except Exception as e:
            print(f"‚ùå Erreur lors de l'ex√©cution de kbo_spider: {e}")
            return False


def main():
    parser = argparse.ArgumentParser(description="Ex√©cuteur de spiders KBO")
    parser.add_argument("--spider", choices=["kbo_spider", "ejustice_spider", "consult_spider", "all"],
                        required=True, help="Spider √† ex√©cuter")
    parser.add_argument("--limit", type=int, help="Nombre maximum d'entreprises √† traiter")
    parser.add_argument("--mongo-uri", default="mongodb://localhost:27017", help="URI MongoDB")
    parser.add_argument("--mongo-db", default="kbo_db", help="Base de donn√©es MongoDB")
    parser.add_argument("--diagnose", action="store_true", help="Effectuer un diagnostic de la base de donn√©es")

    args = parser.parse_args()

    runner = SpiderRunner(args.mongo_uri, args.mongo_db)

    # Test de la connexion MongoDB
    if not runner.test_mongodb_connection():
        sys.exit(1)

    # Diagnostic si demand√©
    if args.diagnose:
        runner.diagnose_database()
        return

    if args.spider == "kbo_spider":
        # KBO spider utilise son propre CSV
        success = runner.run_kbo_spider_with_csv(args.limit)
        sys.exit(0 if success else 1)

    elif args.spider == "all":
        # Phase 1: Ex√©cuter KBO spider d'abord (pour remplir la DB)
        print("\n" + "=" * 50)
        print("Phase 1: KBO Spider - R√©cup√©ration des donn√©es de base")
        print("=" * 50)
        kbo_success = runner.run_kbo_spider_with_csv()

        if not kbo_success:
            print("‚ùå √âchec du spider KBO - Arr√™t de l'ex√©cution")
            sys.exit(1)

        print("‚úÖ KBO Spider termin√© - Attente de 5 secondes pour la synchronisation...")
        time.sleep(5)

        # Phase 2: R√©cup√©rer les num√©ros d'entreprise APR√àS l'ex√©cution de KBO
        print("\nüìã R√©cup√©ration des num√©ros d'entreprise depuis la base mise √† jour...")
        enterprise_numbers = runner.get_enterprise_numbers(args.limit)

        if not enterprise_numbers:
            print("‚ùå Aucun num√©ro d'entreprise trouv√© apr√®s l'ex√©cution de KBO")
            print("üí° V√©rifiez que le spider KBO a bien ins√©r√© des donn√©es")
            sys.exit(1)

        # Phase 3: Ex√©cuter les autres spiders avec les num√©ros r√©cup√©r√©s
        spiders_to_run = ["ejustice_spider", "consult_spider"]
        all_success = True

        for spider in spiders_to_run:
            print("\n" + "=" * 50)
            print(f"Phase: {spider} - Traitement de {len(enterprise_numbers)} entreprises")
            print("=" * 50)
            success = runner.run_spider(spider, enterprise_numbers)
            all_success = all_success and success

            if success:
                print(f"‚úÖ {spider} termin√© avec succ√®s")
                # Petite pause entre les spiders
                if spider != spiders_to_run[-1]:  # Pas de pause apr√®s le dernier
                    print("‚è≥ Pause de 3 secondes avant le spider suivant...")
                    time.sleep(3)
            else:
                print(f"‚ö†Ô∏è  {spider} a √©chou√© mais continue avec les autres...")

        print("\n" + "=" * 60)
        print(f"üèÅ Ex√©cution termin√©e - Succ√®s global: {'‚úÖ' if all_success else '‚ö†Ô∏è'}")
        print("=" * 60)
        sys.exit(0 if all_success else 1)

    else:
        # Spider individuel (ejustice ou consult)
        enterprise_numbers = runner.get_enterprise_numbers(args.limit)

        if not enterprise_numbers:
            print("‚ùå Impossible de r√©cup√©rer les num√©ros d'entreprise")
            sys.exit(1)

        success = runner.run_spider(args.spider, enterprise_numbers)
        sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()